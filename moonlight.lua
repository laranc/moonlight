-------------------------------------------------------------------------------
-- Copyright (C) 2025 Christian Laranjeira <laranc@github.com>               --
--                                                                           --
-- This program is free software: you can redistribute it and/or modify it   --
-- under the terms of the GNU General Public License as published by the     --
-- Free Software Foundation, either version 3 of the License, or (at your    --
-- option) any later version.                                                --
--                                                                           --
-- This program is distributed in the hope that it will be useful, but	     --
-- WITHOUT ANY WARRANTY; without even the implied warranty of                --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General  --
-- Public License for more details.                                          --
--                                                                           --
-- You should have received a copy of the GNU General Public License along   --
-- with this program. If not, see <https://www.gnu.org/licenses/>.           --
--                                                                           --
-- A precompiled binary of samurai is provided as part of this program.	     --
-- samurai is licensed under the Apache License Version 2.0, and can be      --
-- found here <https://github.com/michaelforney/samurai>.                    --
--                                                                           --
-- Parts of this program were written using mate.h source code as a          --
-- reference, which is licensed under the MIT License.                       --
-------------------------------------------------------------------------------

local state = {
	startTime = 0.0,
	buildDir = "",
	compiler = "",
	samuraiPath = "",
	builtPackages = {},
}

---@param msg string
local function logInfo(msg)
	print("[INFO]: " .. msg)
end

---@param msg string
local function logWarning(msg)
	print("\27[33;1m[WARN]: " .. msg .. "\27[0m")
end

---@param msg string
local function logFatal(msg)
	print("\27[31;1m[FATAL]: " .. msg .. "\27[0m")
	os.exit(1)
end

---@param msg string
local function logSuccess(msg)
	print("\27[32m[SUCCESS]: " .. msg .. "\27[0m")
end

local samurai_b64 = [[

]]

local function loadSamurai()
	local exe = io.open(state.samuraiPath)
	if exe then
		exe:close()
		logInfo("Cached Samurai executable found")
		return
	end
	logInfo("Unpacking Samurai executable")
	local tmpPath = state.samuraiPath .. ".b64"
	local tmp = io.open(tmpPath, "w")
	if not tmp then
		logFatal("loadSamurai: Failed to unpack Samurai executable")
	end
	tmp:write(samurai_b64)
	tmp:close()
	os.execute("base64 -d " .. tmpPath .. " > " .. state.samuraiPath)
	os.execute("chmod +x " .. state.samuraiPath)
	os.execute("rm " .. tmpPath)
end

---@param text string
---@return table|nil
local function strSplit(text)
	if not text then
		return nil
	end
	local result = {}
	for str in text:gmatch("([^%s]+)") do
		table.insert(result, str)
	end
	return result
end

---@param glob string
---@return string,string
local function parseGlob(glob)
	local sepIdx = glob:find("[*?%[]")
	if not sepIdx then
		return glob, "*"
	end
	local slashIdx = glob:sub(1, sepIdx):match(".*()/")
	if slashIdx then
		return glob:sub(1, slashIdx), glob:sub(slashIdx + 1)
	else
		return "./", glob
	end
end

---@param glob string
---@return string
local function globToPattern(glob)
	local pattern = { "^" }
	for i = 1, #glob do
		local c = glob:sub(i, i)
		if c == "*" then
			if glob:sub(i, i + 1) == "**" then
				i = i + 1
			else
				table.insert(pattern, "[^/]*")
			end
		elseif c == "?" then
			table.insert(pattern, ".")
		elseif c:match("[%[%]%.%%%+%-%^%$]") then
			table.insert(pattern, "%" .. c)
		else
			table.insert(pattern, c)
		end
	end
	table.insert(pattern, "$")
	return table.concat(pattern)
end

---@param list table
---@param path string
local function getGlob(list, path)
	local root, glob = parseGlob(path)
	local pattern = globToPattern(glob)
	local find, err = io.popen("find '" .. root .. "' -type f", "r")
	if err then
		logFatal("getGlob: Error finding pattern '" .. root "', err: " .. err)
	end
	for file in find:lines() do
		local relPath = file:sub(#root + 1)
		if relPath:match(pattern) then
			table.insert(list, file)
		end
	end
end

---@param sources table
---@return table
local function outputTransform(sources)
	local result = {}
	for i, source in ipairs(sources) do
		local out = source:sub(1, #source - 1)
		out = out .. "o"
		result[i] = out
	end
	return result
end

---@param sources table
---@param sourceList table
local function addFiles(sources, sourceList)
	for _, source in ipairs(sourceList) do
		if source:find("*") then
			getGlob(sources, source)
		else
			table.insert(sources, source)
		end
	end
end

---@param includes table
---@param includeList table
local function addIncludePaths(includes, includeList)
	if #includes > 0 then
		table.insert(includes, " ")
	end
	for i, inc in ipairs(includeList) do
		if i == 0 and #includes == 0 then
			table.insert(includes, "-I\"" .. inc .. "\"")
		else
			table.insert(includes, " -I\"" .. inc .. "\"")
		end
	end
end

---@param libs table
---@param libList table
local function addLibraryPaths(libs, libList)
	for i, lib in ipairs(libList) do
		if i == 0 and #libs == 0 then
			table.insert(libs, "-L\"" .. lib .. "\"")
		else
			table.insert(libs, " -L\"" .. lib .. "\"")
		end
	end
end

---@param staticLibs table
---@param staticLibList table
local function addStaticLibs(staticLibs, staticLibList)
	for _, staticLib in ipairs(staticLibList) do
		if staticLib:find("*") then
			getGlob(staticLibs, staticLib)
		else
			table.insert(staticLibs, staticLib)
		end
	end
end

---@param libs table
---@param sysLibList table
local function linkSystemLibraries(libs, sysLibList)
	for i, sysLib in ipairs(sysLibList) do
		if i == 0 and #libs == 0 then
			table.insert(libs, "-l" .. sysLib)
		else
			table.insert(libs, " -l" .. sysLib)
		end
	end
end

---Call before all other functions
---@param buildDir? string
---@param compiler? string
function StartBuild(buildDir, compiler)
	state.startTime = os.clock()
	state.buildDir = buildDir or "./build"
	state.compiler = compiler or "gcc"
	state.samuraiPath = "./.cache/samurai"
	os.execute("mkdir -p " .. state.buildDir)
	os.execute("mkdir -p " .. "./.cache")
	loadSamurai()
	logInfo("Build started")
end

---Call after all other functions finish
function EndBuild()
	logInfo("Build time: " .. (os.clock() - state.startTime) * 1000 .. "ms")
end

---Runs the supplied command
---@param executable string
---@return boolean?
function RunCommand(executable)
	return os.execute(executable)
end

---Returns a compiler flags string, leave parameters empty for sensible defaults
---@param warnings? "NONE"|"MINIMAL"|"DEFAULT"|"VERBOSE"
---@param debug? "OFF"|"MINIMAL"|"MEDIUM"|"DEFAULT"
---@param optimization? "NONE"|"BASIC"|"DEFAULT"|"SIZE"|"AGGRESSIVE"
---@param std? "C99"|"C11"|"C17"|"C23"|"C2X"
---@return string
function CompilerFlags(warnings, debug, optimization, std)
	local flags = {}
	if warnings == "NONE" then
		table.insert(flags, "-w")
	elseif warnings == "MINIMAL" then
		table.insert(flags, "-Wall")
	elseif warnings == "VERBOSE" then
		table.insert(flags, "-Wall -Wextra -Wpedantic")
	else
		table.insert(flags, "-Wall -Wextra")
	end
	if debug == "MINIMAL" then
		table.insert(flags, "-g1")
	elseif debug == "MEDIUM" then
		table.insert(flags, "-g2")
	elseif debug == "DEFAULT" or not debug then
		table.insert(flags, "-g3")
	end
	if optimization == "NONE" then
		table.insert(flags, "-O0")
	elseif optimization == "BASIC" then
		table.insert(flags, "-O1")
	elseif optimization == "SIZE" then
		table.insert(flags, "-Os")
	elseif optimization == "AGGRESSIVE" then
		table.insert(flags, "-O3")
	else
		table.insert(flags, "-O2")
	end
	if std == "C99" then
		table.insert(flags, "-std=c99")
	elseif std == "C17" then
		table.insert(flags, "-std=c17")
	elseif std == "C23" then
		table.insert(flags, "-std=c23")
	elseif std == "C2X" then
		table.insert(flags, "-std=c2x")
	else
		table.insert(flags, "-std=c11")
	end
	return table.concat(flags, " ")
end

Executable = {
	output = nil,
	flags = {},
	linkerFlags = {},
	sources = {},
	includes = {},
	staticLibs = {},
	libs = {},
	outputPath = "",
	ninjaBuildPath = "",
	packages = {},
}

---Returns an executable options table, leave parameters empty for default options
---@param output? string
---@param flags? string
---@param linkerFlags? string
---@param includes? string
---@param libs? string
---@param staticLibs? string
---@return table
function ExecutableOptions(output, flags, linkerFlags, includes, libs, staticLibs)
	if not output then
		logWarning("Executable: Using default build options")
	end
	return {
		output = output or "a.out",
		flags = flags,
		linkerFlags = linkerFlags,
		includes = includes,
		libs = libs,
		staticLibs = staticLibs,
	}
end

---Creates a new executable
---@param options table
---@return table
function Executable:Create(options)
	if not options then
		logFatal("Executable.Create: Undefined build options")
	end
	local exec = {}
	setmetatable(exec, self)
	self.__index = self
	exec.output = options.output
	exec.flags = strSplit(options.flags) or {}
	exec.linkerflags = strSplit(options.linkerFlags) or {}
	exec.sources = strSplit(options.sources) or {}
	exec.includes = strSplit(options.includes) or {}
	exec.libs = strSplit(options.libs) or {}
	exec.staticLibs = strSplit(options.staticLibs) or {}
	exec.outputPath = state.buildDir .. "/" .. exec.output
	exec.ninjaBuildPath = state.buildDir .. "/exe-" .. exec.output .. ".ninja"
	exec.packages = {}
	return exec
end

---Adds one or more files to the sources table
---@param ... string
function Executable:AddFiles(...)
	local sources = { ... }
	addFiles(self.sources, sources)
end

---Adds include paths to the includes table
---@param ... string
function Executable:AddIncludePaths(...)
	local includes = { ... }
	addIncludePaths(self.includes, includes)
end

---Adds library paths to the libs table
---@param ... string
function Executable:AddLibraryPaths(...)
	local libs = { ... }
	addLibraryPaths(self.libs, libs)
end

---Adds static libraries to the staticLibs table
---@param ... string
function Executable:AddStaticLibs(...)
	local staticLibs = { ... }
	addStaticLibs(self.staticLibs, staticLibs)
end

---Adds system libraries to the libs table
---@param ... string
function Executable:LinkSystemLibraries(...)
	local sysLibs = { ... }
	linkSystemLibraries(self.libs, sysLibs)
end

---Imports a dependency from a package table
---@param package table
function Executable:AddDependency(package)
	if not package then
		logFatal("Executable.AddDepedency: Undefined package")
	end
	local includes = {}
	for i, inc in ipairs(package.includes) do
		includes[i] = package.dir .. "/" .. inc
	end
	addIncludePaths(self.includes, includes)
	self.packages[package.name] = package
	addStaticLibs(self.staticLibs, { package.lib })
end

---Binds a port from a port table
---@param port table
function Executable:BindPort(port)
	if not port then
		logFatal("Executable.BindPort: Undefined port")
	end
	local includes = {}
	for i, inc in ipairs(port.includes) do
		includes[i] = port.dir .. "/" .. inc
	end
	local staticLibs = {}
	for i, lib in ipairs(port.staticLibs) do
		staticLibs[i] = port.dir .. "/" .. lib
	end
	local libs = {}
	for i, lib in ipairs(port.libs) do
		libs[i] = port.dir .. "/" .. lib
	end
	addIncludePaths(self.includes, includes)
	addStaticLibs(self.staticLibs, staticLibs)
	addLibraryPaths(self.libs, libs)
	linkSystemLibraries(self.libs, port.sysLibs)
end

---Buils the executable
function Executable:Install()
	if #self.sources == 0 then
		logFatal("Executable.Install: No source files provided")
	elseif not self.output then
		logFatal("Executable.Install: No output specified, ensure you call StartBuild")
	end
	for n, p in pairs(self.packages) do
		if state.builtPackages[n] then
			logInfo("Dependency '" .. n .. "' already built, skipping")
		else
			logInfo("Building dependency '" .. n .. "'")
			state.builtPackages[n] = true
			local staticLib = p.buildFn(p.dir, p.rules)
			addStaticLibs(self.staticLibs, staticLib.staticLibs)
			linkSystemLibraries(self.libs, staticLib.sysLibs)
		end
	end
	local buildCmd = { "cc = " .. state.compiler .. "\n" }
	if #self.linkerFlags > 0 then
		table.insert(buildCmd, "linker_flags = " .. table.concat(self.linkerFlags, " ") .. "\n")
	end
	if #self.flags > 0 then
		table.insert(buildCmd, "flags = " .. table.concat(self.flags, " ") .. "\n")
	end
	if #self.includes > 0 then
		table.insert(buildCmd, "includes = " .. table.concat(self.includes, " ") .. "\n")
	end
	if #self.libs > 0 then
		table.insert(buildCmd, "libs = " .. table.concat(self.libs, " ") .. "\n")
	end
	local pwd, err = io.popen("pwd", "r")
	if err then
		logFatal("Executable.Install: Could not print working directory, err: " .. err)
	end
	local cwd = pwd:read("a")
	pwd:close()
	table.insert(buildCmd, "cwd = " .. cwd .. "\n")
	table.insert(buildCmd, "builddir = " .. state.buildDir .. "\n")
	table.insert(buildCmd, "target = $builddir/" .. self.output .. "\n\n")
	table.insert(buildCmd, "rule link\n command = $cc")
	if #self.flags > 0 then
		table.insert(buildCmd, " $flags")
	end
	if #self.linkerFlags > 0 then
		table.insert(buildCmd, " $linker_flags")
	end
	table.insert(buildCmd, " -o $out $in")
	if #self.libs > 0 then
		table.insert(buildCmd, " $libs")
	end
	table.insert(buildCmd, "\n\n")
	table.insert(buildCmd, "rule compile\n command = $cc")
	if #self.flags > 0 then
		table.insert(buildCmd, " $flags")
	end
	if #self.includes > 0 then
		table.insert(buildCmd, " $includes")
	end
	table.insert(buildCmd, " -c $in -o $out\n\n")
	local outputFiles = outputTransform(self.sources)
	local output = {}
	for i, outputFile in ipairs(outputFiles) do
		local sourceFile = self.sources[i]
		table.insert(buildCmd, "build $builddir/" .. outputFile)
		table.insert(buildCmd, ": compile $cwd/" .. sourceFile .. "\n")
		if #output == 0 then
			table.insert(output, "$builddir/" .. outputFile)
		else
			table.insert(output, " $builddir/" .. outputFile)
		end
	end
	table.insert(buildCmd,
		"build $target: link " .. table.concat(output, " ") .. " " .. table.concat(self.staticLibs, " ") .. "\n\n")
	table.insert(buildCmd, "default $target\n")
	local ninjaBuildFile, err = io.open(self.ninjaBuildPath, "w")
	if err then
		logFatal("Executable.Install: Failed to write build.ninja for '" .. self.ninjaBuildPath .. "', err: " .. err)
	end
	ninjaBuildFile:write(table.concat(buildCmd, ""))
	ninjaBuildFile:close()
	local res = os.execute(state.samuraiPath .. " -f " .. self.ninjaBuildPath)
	if res ~= 0 then
		logFatal("Executable.Install: Build failed with code: " .. res)
	end
	logSuccess("Executable.Install: Build completed successfully")
end

StaticLib = {
	output = nil,
	flags = {},
	arFlags = {},
	sources = {},
	includes = {},
	staticLibs = {},
	sysLibs = {},
	outputPath = {},
	ninjaBuildPath = "",
	packages = {},
}

---Returns a static lib options table, leave parameters empty for default options
---@param output? string
---@param flags? string
---@param arFlags? string
---@param includes? string
---@param staticLibs? string
---@return table
function StaticLibOptions(output, flags, arFlags, includes, staticLibs)
	if not output then
		output = "undef"
		logWarning("StaticLib: Using default build options")
	end
	output = "lib" .. output .. ".a"
	return {
		output = output,
		flags = flags,
		arFlags = arFlags,
		includes = includes,
		staticLibs = staticLibs,
	}
end

---Creates a new static library
---@param options table
---@return table
function StaticLib:Create(options)
	if not options then
		logFatal("StaticLib.Create: Undefined build options")
	end
	local lib = {}
	setmetatable(lib, self)
	self.__index = self
	lib.output = options.output
	lib.flags = strSplit(options.flags) or {}
	lib.arFlags = strSplit(options.arFlags) or { "rcs" }
	lib.sources = strSplit(options.sources) or {}
	lib.includes = strSplit(options.includes) or {}
	lib.staticLibs = strSplit(options.staticLibs) or {}
	lib.sysLibs = {}
	lib.outputPath = state.buildDir .. "/" .. lib.output
	lib.packages = {}
	lib.ninjaBuildPath = state.buildDir .. "/lib-" .. lib.output .. ".ninja"
	return lib
end

---Adds one or more files to the sources table
---@param ... string
function StaticLib:AddFiles(...)
	local sources = { ... }
	addFiles(self.sources, sources)
end

---Adds include paths to the includes table
---@param ... string
function StaticLib:AddIncludePaths(...)
	local includes = { ... }
	addIncludePaths(self.includes, includes)
end

---Adds static libs to the static libs table
---@param ... string
function StaticLib:AddStaticLibs(...)
	local staticLibs = { ... }
	addStaticLibs(self.staticLibs, staticLibs)
end

---Imports a dependency from a package table
---@param package table
function StaticLib:AddDependency(package)
	if not package then
		logFatal("StaticLib.AddDepedency: Undefined package")
	end
	local includes = {}
	for i, inc in ipairs(package.includes) do
		includes[i] = package.dir .. "/" .. inc
	end
	addIncludePaths(self.includes, includes)
	self.packages[package.name] = package
	addStaticLibs(self.staticLibs, { package.lib })
end

---Binds a port from a port table
---@param port table
function StaticLib:BindPort(port)
	if not port then
		logFatal("StaticLib.BindPort: Undefined port")
	end
	local includes = {}
	for i, inc in ipairs(port.includes) do
		includes[i] = port.dir .. "/" .. inc
	end
	local staticLibs = {}
	for i, lib in ipairs(port.staticLibs) do
		staticLibs[i] = port.dir .. "/" .. lib
	end
	addIncludePaths(self.includes, includes)
	addStaticLibs(self.staticLibs, staticLibs)
	self.sysLibs = port.sysLibs
end

---Builds the static library
function StaticLib:Install()
	if #self.sources == 0 then
		logFatal("StaticLib.Install: No source files provided")
	elseif not self.output then
		logFatal("StaticLib.Install: No output specified, ensure you call StartBuild")
	end
	for n, p in pairs(self.packages) do
		if state.builtPackages[n] then
			logInfo("Dependency '" .. n .. "' already built, skipping")
		else
			logInfo("Building dependency '" .. n .. "'")
			state.builtPackages[n] = true
			local staticLib = p.buildFn(p.dir, p.rules)
			addStaticLibs(self.staticLibs, staticLib.staticLibs)
		end
	end
	local buildCmd = { "cc = " .. state.compiler .. "\n", "ar = ar\n" }
	if #self.flags > 0 then
		table.insert(buildCmd, "flags = " .. table.concat(self.flags, " ") .. "\n")
	end
	if #self.arFlags > 0 then
		table.insert(buildCmd, "ar_flags = " .. table.concat(self.arFlags, " ") .. "\n")
	end
	if #self.includes > 0 then
		table.insert(buildCmd, "includes = " .. table.concat(self.includes, " ") .. "\n")
	end
	local pwd, err = io.popen("pwd", "r")
	if err then
		logFatal("StaticLib.Install: Could not print working directory, err: " .. err)
	end
	local cwd = pwd:read("a")
	pwd:close()
	table.insert(buildCmd, "cwd = " .. cwd .. "\n")
	table.insert(buildCmd, "builddir = " .. state.buildDir .. "\n")
	table.insert(buildCmd, "target = $builddir/" .. self.output .. "\n\n")
	table.insert(buildCmd, "rule archive\n command = $ar")
	if #self.arFlags > 0 then
		table.insert(buildCmd, " $ar_flags")
	end
	table.insert(buildCmd, " $out $in\n\n")
	table.insert(buildCmd, "rule compile\n command = $cc")
	if #self.flags > 0 then
		table.insert(buildCmd, " $flags")
	end
	if #self.includes > 0 then
		table.insert(buildCmd, " $includes")
	end
	table.insert(buildCmd, " -c $in -o $out\n\n")
	local outputFiles = outputTransform(self.sources)
	local output = {}
	for i, outputFile in ipairs(outputFiles) do
		local sourceFile = self.sources[i]
		table.insert(buildCmd, "build $builddir/" .. outputFile)
		table.insert(buildCmd, ": compile $cwd/" .. sourceFile .. "\n")
		if #output == 0 then
			table.insert(output, "$builddir/" .. outputFile)
		else
			table.insert(output, " $builddir/" .. outputFile)
		end
	end
	table.insert(buildCmd, "build $target: archive " .. table.concat(output, " ") .. "\n\n")
	table.insert(buildCmd, "default $target\n")
	local ninjaBuildFile, err = io.open(self.ninjaBuildPath, "w")
	if err then
		logFatal("StaticLib.Install: Failed to write build.ninja for '" .. self.ninjaBuildPath .. "', err: " .. err)
	end
	ninjaBuildFile:write(table.concat(buildCmd, ""))
	ninjaBuildFile:close()
	local res = os.execute(state.samuraiPath .. " -f " .. self.ninjaBuildPath)
	if res ~= 0 then
		logFatal("StaticLib.Install: Build failed with code: " .. res)
	end
	logSuccess("StaticLib.Install: Build completed successfully")
end

Package = {
	name = "",
	dir = "",
	rules = nil,
	lib = "",
	includes = {},
	buildFn = nil,
}

---Searches for package.lua in path, creates a package table
---@param path string
---@param rules? string
---@return table
function Package:Import(path, rules)
	local filePath = path .. "/package.lua"
	local packageFile = io.open(filePath)
	if not packageFile then
		logFatal("Package.Import: package.lua not found in directory: " .. path)
	end
	packageFile:close()
	local import = dofile(filePath)
	if not import then
		logFatal("Package.Import: package table not found in " .. filePath)
	end
	local pkg = {}
	setmetatable(pkg, self)
	self.__index = self
	pkg.name = import.name
	pkg.dir = path
	pkg.rules = rules
	pkg.lib = state.buildDir .. "/lib" .. import.name .. ".a"
	pkg.includes = import.includes or {}
	pkg.buildFn = import.build
	return pkg
end

Port = {
	dir = "",
	includes = {},
	staticLibs = {},
	libs = {},
	sysLibs = {},
}

function Port:Get(path)
	local filePath = path .. "/port.lua"
	local portFile = io.open(filePath)
	if not portFile then
		logFatal("Port.Get: port.lua not found in directory: " .. path)
	end
	portFile:close()
	local tbl = dofile(filePath)
	if not tbl then
		logFatal("Port.Get: port table not found in " .. filePath)
	end
	local port = {}
	setmetatable(port, self)
	self.__index = self
	port.dir = path
	port.includes = strSplit(tbl.includes) or {}
	port.staticLibs = strSplit(tbl.staticLibs) or {}
	port.libs = strSplit(tbl.libs) or {}
	port.sysLibs = strSplit(tbl.sysLibs) or {}
	logInfo("Port.Get: building port: '" .. path .. "'")
	os.execute("(cd " .. path .. " && " .. tbl.cmd .. ")")
	return port
end
